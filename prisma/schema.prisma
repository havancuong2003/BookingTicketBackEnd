// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role{
    id Int @id @default(autoincrement())
    roleName String @unique
    user User[]
}
model User{
  id Int @id @default(autoincrement())
  email String @unique
  hashPass String?
  firstName String
  lastName String
  phoneNumber String? @unique
  picture String? 
  roleId Int?
  role Role? @relation(fields: [roleId],references: [id])
  isEmailVerified Boolean @default(false)
  verificationToken String?
  verificationTokenExpires DateTime?
  resetPasswordToken String?
  resetPasswordExpires DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  seats Seat[]
  payments Payment[]
   bookings Booking[]
}

model Movie {
  id          Int       @id @default(autoincrement())
  title       String?
  description String?
  director    String?
  actors      String?
  releaseDate DateTime?
  rating      Float?
  status      MovieStatus?
  banner      String?
  duration    Int?
  trailer     String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  screenings  Screening[]
  types       MovieType[] // Mối quan hệ với Type thông qua MovieType
}

model Type {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  movies  MovieType[] // Mối quan hệ nhiều-nhiều với Movie
}

model MovieType {
  movieId Int
  typeId  Int

  movie Movie @relation(fields: [movieId], references: [id])
  type  Type  @relation(fields: [typeId], references: [id])

  @@id([movieId, typeId]) // Đặt khóa chính cho mối quan hệ
}


enum MovieStatus {
  COMING_SOON
  NOW_SHOWING
  ENDED
  HIDDEN
}


model Cinema {
  cinemaId    Int      @id @default(autoincrement())
  name        String?
  location    String?
  totalScreens Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  rooms Room[]
}




model Room {
  roomId    Int      @id @default(autoincrement())
  roomCode  String?
  cinemaId Int?

  cinema Cinema? @relation(fields: [cinemaId],references: [cinemaId])
  screenings  Screening[]
  seats Seat[]
}


model Screening {
  screeningId Int      @id @default(autoincrement())
  movieId     Int?
  roomId      Int?
  startTime   DateTime?
  endTime     DateTime?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  room        Room?     @relation(fields: [roomId], references: [roomId])
  movie       Movie?    @relation(fields: [movieId], references: [id])
  bookings Booking[]
  payments Payment[]
}


model Seat {
  seatId     Int     @id @default(autoincrement())
  roomId  Int?
  seatNumber Int?     
  rowCode  String ? 
  seatType   Int ?  @default(0)
  status     Int ? @default(0)
  userId     Int ?
 user User? @relation(fields: [userId], references: [id])
  room        Room?     @relation(fields: [roomId], references: [roomId])
   bookings Booking[]
   paymentDetails PaymentDetail[]
}





model Booking {
  bookingId    Int       @id @default(autoincrement())
  userId       Int?
  screeningId  Int?
  seatId       Int?
  bookingDate  DateTime  @default(now())
  status       Int ? @default(0)

  user         User?   @relation(fields: [userId], references: [id])
  screening    Screening ?@relation(fields: [screeningId], references: [screeningId])
  seat         Seat    ?  @relation(fields: [seatId], references: [seatId])
}


model Payment {
  paymentId      Int      @id @default(autoincrement())
  userId         Int?
  screeningId    Int?
  totalAmount    Float?
  paymentDate    DateTime? @default(now())
  status         Int?
  user           User?     @relation(fields: [userId], references: [id])
  screening    Screening ?@relation(fields: [screeningId], references: [screeningId])
  paymentDetails PaymentDetail[]
  bookingCombos BookingCombo[]
}

model PaymentDetail {
  paymentDetailId          Int      @id @default(autoincrement())
  paymentId   Int?
  seatId      Int?
  price       Float?
  payment     Payment?  @relation(fields: [paymentId], references: [paymentId])
  seat        Seat?     @relation(fields: [seatId], references: [seatId])

}

model Combo {
  id      Int          @id @default(autoincrement())  // ID tự động tăng
  name    String       @db.VarChar(255)               // Tên combo
  price   Float                                       // Giá combo
  image   String?      @db.VarChar(255)               // Đường dẫn hình ảnh (có thể để trống)
  items   ComboItem[]                                  // Nhiều món ăn hoặc đồ uống với số lượng
  bookingCombos BookingCombo[]
}

model MenuItem {
  id      Int          @id @default(autoincrement())  // ID tự động tăng
  name    String       @db.VarChar(255)               // Tên món ăn
  price   Float                                       // Giá món ăn
  image   String?      @db.VarChar(255)               // Đường dẫn hình ảnh (có thể để trống)
  quantity Int  @default(0)
  type    MenuItemType 
  combos  ComboItem[]                                  // Nhiều combo có món ăn này
}

model ComboItem {
  id        Int      @id @default(autoincrement())    // ID tự động tăng
  comboId   Int      // ID của combo
  menuItemId Int      // ID của món ăn
  quantity  Int      // Số lượng của món ăn trong combo

  combo     Combo     @relation(fields: [comboId], references: [id])
  menuItem  MenuItem  @relation(fields: [menuItemId], references: [id])
}

enum MenuItemType {
  FOOD   // Đồ ăn
  DRINK  // Đồ uống
}
model BookingCombo {
  bookingComboId        Int      @id @default(autoincrement()) 
  paymentId   Int?
  comboId   Int      // ID của combo
  quantity  Int      // Số lượng của combo

  combo     Combo    @relation(fields: [comboId], references: [id])
  payment Payment?  @relation(fields: [paymentId], references: [paymentId])
 
}

